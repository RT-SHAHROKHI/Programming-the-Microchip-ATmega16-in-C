
AVRASM ver. 2.1.30  D:\dars\az riz\New V\codevision\Debug\List\5#.asm Wed Nov 24 18:10:57 2021

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0031 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _digit:
00002a f940
00002b 3024
00002c 1219
00002d 7802      	.DB  0x40,0xF9,0x24,0x30,0x19,0x12,0x2,0x78
00002e 1000      	.DB  0x0,0x10
                 _hell:
00002f 0609
000030 c7c7      	.DB  0x9,0x6,0xC7,0xC7
                 
                 __RESET:
000031 94f8      	CLI
000032 27ee      	CLR  R30
000033 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000034 e0f1      	LDI  R31,1
000035 bffb      	OUT  GICR,R31
000036 bfeb      	OUT  GICR,R30
000037 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000038 e08d      	LDI  R24,(14-2)+1
000039 e0a2      	LDI  R26,2
00003a 27bb      	CLR  R27
                 __CLEAR_REG:
00003b 93ed      	ST   X+,R30
00003c 958a      	DEC  R24
00003d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000040 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000041 93ed      	ST   X+,R30
000042 9701      	SBIW R24,1
000043 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000044 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000045 bfed      	OUT  SPL,R30
000046 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000047 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000048 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000049 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004a 940c 004c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include<mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include<delay.h>
                 ;flash unsigned char
                 ;digit[10]={0b01000000,0b011111001,0b00100100,0b00110000,0b00011001,0b00010010,0b00000010,0b01111000,0b00000000,0b0001000 ...
                 ;flash unsigned char
                 ;hell[4]={0b00001001 , 0b00000110 , 0b011000111 ,0b011000111  };       //----- it also could be like :  hel[3]={0b0000100 ...
                 ;void  main(void)
                 ; 0000 0008 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0009  char i=0;   // in 4 digit nymbers : stands for | [4]321 | &  2 digit nymbers : stands for | [2]1 |
                 ; 0000 000A  char j=0;   // in 4 digit nymbers : stands for | 4[3]21 | &                               | 2[1] |
                 ; 0000 000B  char m=0;   // in 4 digit nymbers : stands for | 43[2]1 |
                 ; 0000 000C  char n=0;   // in 4 digit nymbers : stands for | 432[1] |
                 ; 0000 000D  int z=0;    // just for show & time set
                 ; 0000 000E  char flag=0;
                 ; 0000 000F 
                 ; 0000 0010 
                 ; 0000 0011  DDRB=0Xff;  // 7seg output
00004c 9721      	SBIW R28,1
00004d e0e0      	LDI  R30,LOW(0)
00004e 83e8      	ST   Y,R30
                 ;	i -> R17
                 ;	j -> R16
                 ;	m -> R19
                 ;	n -> R18
                 ;	z -> R20,R21
                 ;	flag -> Y+0
00004f e010      	LDI  R17,0
000050 e000      	LDI  R16,0
000051 e030      	LDI  R19,0
000052 e020      	LDI  R18,0
                +
000053 e040     +LDI R20 , LOW ( 0 )
000054 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000055 efef      	LDI  R30,LOW(255)
000056 bbe7      	OUT  0x17,R30
                 ; 0000 0012  PORTB=0X00; //
000057 e0e0      	LDI  R30,LOW(0)
000058 bbe8      	OUT  0x18,R30
                 ; 0000 0013 
                 ; 0000 0014  DDRD=0Xff;  // for  output control
000059 efef      	LDI  R30,LOW(255)
00005a bbe1      	OUT  0x11,R30
                 ; 0000 0015  PORTD=0X00; //
00005b e0e0      	LDI  R30,LOW(0)
00005c bbe2      	OUT  0x12,R30
                 ; 0000 0016 
                 ; 0000 0017  DDRA=0X00;  // for tst push btn [a6 a5] &  dip switch [a0 a1 a2 a3 a4]
00005d bbea      	OUT  0x1A,R30
                 ; 0000 0018 
                 ; 0000 0019      while(1)
                 _0x3:
                 ; 0000 001A     {
                 ; 0000 001B         //part 1
                 ; 0000 001C         if(PINA.0==1)// dip btn 1 -> pina.0
00005e 9bc8      	SBIS 0x19,0
00005f c02c      	RJMP _0x6
                 ; 0000 001D         {
                 ; 0000 001E                // j=9;  //for checking dec
                 ; 0000 001F                // i=9;  //
                 ; 0000 0020                 while(1)
                 _0x7:
                 ; 0000 0021                 {
                 ; 0000 0022                 A :
                 _0xA:
                 ; 0000 0023                      for (z=0;z<100;z++) // show part
                +
000060 e040     +LDI R20 , LOW ( 0 )
000061 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0xC:
                +
000062 3644     +CPI R20 , LOW ( 100 )
000063 e0e0     +LDI R30 , HIGH ( 100 )
000064 075e     +CPC R21 , R30
                 	__CPWRN 20,21,100
000065 f424      	BRGE _0xD
                 ; 0000 0024                      {
                 ; 0000 0025                        PORTD=1;
000066 d0db      	RCALL SUBOPT_0x0
                 ; 0000 0026                        PORTB=digit[i];
                 ; 0000 0027                        delay_ms(1);
                 ; 0000 0028 
                 ; 0000 0029                        PORTD=0X02;
                 ; 0000 002A                        PORTB=digit[j];
                 ; 0000 002B                        delay_ms(1);
                 ; 0000 002C                       }
                +
000067 5f4f     +SUBI R20 , LOW ( - 1 )
000068 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000069 cff8      	RJMP _0xC
                 _0xD:
                 ; 0000 002D 
                 ; 0000 002E 
                 ; 0000 002F                         while(PINA.5==0) goto dec ;  // if you want to check you can comment this line
00006a 9bcd      	SBIS 0x19,5
00006b c008      	RJMP _0x11
                 ; 0000 0030 
                 ; 0000 0031                         if(j==9)
00006c 3009      	CPI  R16,9
00006d f429      	BRNE _0x12
                 ; 0000 0032                         {
                 ; 0000 0033                           if(i==9)
00006e 3019      	CPI  R17,9
00006f f409      	BRNE _0x13
                 ; 0000 0034                           {
                 ; 0000 0035                            //if (j==9)
                 ; 0000 0036                            {i=-1;}  //  [9](9) -> [0](9not_important_here)  ; i=-1 cuse will be +1 and i will be = 0 IN  ...
000070 ef1f      	LDI  R17,LOW(255)
                 ; 0000 0037                           }
                 ; 0000 0038 
                 ; 0000 0039                          j= -1 ;  // j from [9] -> [0]   in **
                 _0x13:
000071 ef0f      	LDI  R16,LOW(255)
                 ; 0000 003A                          i+=1;  // number + 10 ; if A[9] + 0[1] = [a+1]0    here is [[[[ *  ]]]]
000072 5f1f      	SUBI R17,-LOW(1)
                 ; 0000 003B                         }
                 ; 0000 003C                         j+=1;   // number + 1            here is [[[[ ** ]]]]]
                 _0x12:
000073 5f0f      	SUBI R16,-LOW(1)
                 ; 0000 003D 
                 ; 0000 003E                        /*  // if clear cm : you have to push btn evrey time for new increase  , but right now it increas ...
                 ; 0000 003F                         while(PINA.5==1)
                 ; 0000 0040                         {
                 ; 0000 0041                          for (z=0;z<25;z++) // show part
                 ; 0000 0042                          {
                 ; 0000 0043                          PORTD=1;
                 ; 0000 0044                          PORTB=digit[i];
                 ; 0000 0045                          delay_ms(1);
                 ; 0000 0046 
                 ; 0000 0047                          PORTD=0X02;
                 ; 0000 0048                          PORTB=digit[j];
                 ; 0000 0049                          delay_ms(1);
                 ; 0000 004A                          }
                 ; 0000 004B                         }
                 ; 0000 004C                        */
                 ; 0000 004D                         ////////////////////////////////////////////////////////////////////////
                 ; 0000 004E 
                 ; 0000 004F                 dec:
                 _0x11:
                 ; 0000 0050 
                 ; 0000 0051                       while(PINA.6==0) goto A ;  // if you want to check you can comment this line
000074 9bce      	SBIS 0x19,6
000075 cfea      	RJMP _0xA
                 ; 0000 0052 
                 ; 0000 0053                         if(j==0)
000076 3000      	CPI  R16,0
000077 f429      	BRNE _0x17
                 ; 0000 0054                         {
                 ; 0000 0055                           if(i==0)
000078 3010      	CPI  R17,0
000079 f409      	BRNE _0x18
                 ; 0000 0056                           {
                 ; 0000 0057                            //if (j==0)
                 ; 0000 0058                            { i=10; }  //  [0](0) ->
00007a e01a      	LDI  R17,LOW(10)
                 ; 0000 0059                           }
                 ; 0000 005A 
                 ; 0000 005B                          j= 10 ;  // j from [0] will be -> [9 ]   in **
                 _0x18:
00007b e00a      	LDI  R16,LOW(10)
                 ; 0000 005C                          i-=1;  // number - 10 ; if [j]A - [1]0 = [j-1]A    here is [[[[ *  ]]]]
00007c 5011      	SUBI R17,LOW(1)
                 ; 0000 005D                         }
                 ; 0000 005E                         j-=1;   // number + 1            here is [[[[ ** ]]]]]
                 _0x17:
00007d 5001      	SUBI R16,LOW(1)
                 ; 0000 005F 
                 ; 0000 0060                         while(PINA.6==1)
                 _0x19:
00007e 9bce      	SBIS 0x19,6
00007f c00b      	RJMP _0x1B
                 ; 0000 0061                         {
                 ; 0000 0062                          for (z=0;z<25;z++) // show part
                +
000080 e040     +LDI R20 , LOW ( 0 )
000081 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x1D:
                +
000082 3149     +CPI R20 , LOW ( 25 )
000083 e0e0     +LDI R30 , HIGH ( 25 )
000084 075e     +CPC R21 , R30
                 	__CPWRN 20,21,25
000085 f424      	BRGE _0x1E
                 ; 0000 0063                          {
                 ; 0000 0064                          PORTD=1;
000086 d0bb      	RCALL SUBOPT_0x0
                 ; 0000 0065                          PORTB=digit[i];
                 ; 0000 0066                          delay_ms(1);
                 ; 0000 0067 
                 ; 0000 0068                          PORTD=0X02;
                 ; 0000 0069                          PORTB=digit[j];
                 ; 0000 006A                          delay_ms(1);
                 ; 0000 006B                          }
                +
000087 5f4f     +SUBI R20 , LOW ( - 1 )
000088 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000089 cff8      	RJMP _0x1D
                 _0x1E:
                 ; 0000 006C                         }
00008a cff3      	RJMP _0x19
                 _0x1B:
                 ; 0000 006D 
                 ; 0000 006E 
                 ; 0000 006F 
                 ; 0000 0070                     }
00008b cfd4      	RJMP _0x7
                 ; 0000 0071 
                 ; 0000 0072 
                 ; 0000 0073 
                 ; 0000 0074            }
                 ; 0000 0075         //end part 1
                 ; 0000 0076 
                 ; 0000 0077            //part2     HELL
                 ; 0000 0078            if(PINA.1==1) //dip btn 2 -> pina.1
                 _0x6:
00008c 9bc9      	SBIS 0x19,1
00008d c01d      	RJMP _0x1F
                 ; 0000 0079            {
                 ; 0000 007A             for (z=0;z<250;z++)
                +
00008e e040     +LDI R20 , LOW ( 0 )
00008f e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x21:
                +
000090 3f4a     +CPI R20 , LOW ( 250 )
000091 e0e0     +LDI R30 , HIGH ( 250 )
000092 075e     +CPC R21 , R30
                 	__CPWRN 20,21,250
000093 f4bc      	BRGE _0x22
                 ; 0000 007B             {
                 ; 0000 007C                 PORTD=1;
000094 e0e1      	LDI  R30,LOW(1)
000095 bbe2      	OUT  0x12,R30
                 ; 0000 007D                 PORTB=hell[0];
000096 e5ee      	LDI  R30,LOW(_hell*2)
000097 e0f0      	LDI  R31,HIGH(_hell*2)
000098 d0c1      	RCALL SUBOPT_0x1
                 ; 0000 007E                 delay_ms(1);
                 ; 0000 007F 
                 ; 0000 0080                  PORTD=0X02;
000099 e0e2      	LDI  R30,LOW(2)
00009a bbe2      	OUT  0x12,R30
                 ; 0000 0081                  PORTB=hell[1];
                +
00009b e5ef     +LDI R30 , LOW ( 2 * _hell + ( 1 ) )
00009c e0f0     +LDI R31 , HIGH ( 2 * _hell + ( 1 ) )
                 	__POINTW1FN _hell,1
00009d d0bc      	RCALL SUBOPT_0x1
                 ; 0000 0082                  delay_ms(1);
                 ; 0000 0083 
                 ; 0000 0084                  PORTD=0X04;
00009e e0e4      	LDI  R30,LOW(4)
00009f bbe2      	OUT  0x12,R30
                 ; 0000 0085                  PORTB=hell[2];
                +
0000a0 e6e0     +LDI R30 , LOW ( 2 * _hell + ( 2 ) )
0000a1 e0f0     +LDI R31 , HIGH ( 2 * _hell + ( 2 ) )
                 	__POINTW1FN _hell,2
0000a2 d0b7      	RCALL SUBOPT_0x1
                 ; 0000 0086                  delay_ms(1);
                 ; 0000 0087 
                 ; 0000 0088                  PORTD=0X08;
0000a3 e0e8      	LDI  R30,LOW(8)
0000a4 bbe2      	OUT  0x12,R30
                 ; 0000 0089                  PORTB=hell[3];//    or  PORTB=hell[2]; again
                +
0000a5 e6e1     +LDI R30 , LOW ( 2 * _hell + ( 3 ) )
0000a6 e0f0     +LDI R31 , HIGH ( 2 * _hell + ( 3 ) )
                 	__POINTW1FN _hell,3
0000a7 d0b2      	RCALL SUBOPT_0x1
                 ; 0000 008A                  delay_ms(1);
                 ; 0000 008B             }
                +
0000a8 5f4f     +SUBI R20 , LOW ( - 1 )
0000a9 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0000aa cfe5      	RJMP _0x21
                 _0x22:
                 ; 0000 008C            }
                 ; 0000 008D 
                 ; 0000 008E         //part 3     0 TO 9999
                 ; 0000 008F         if(PINA.2==1)// dip btn 3 -> pina.2
                 _0x1F:
0000ab 9bca      	SBIS 0x19,2
0000ac c020      	RJMP _0x23
                 ; 0000 0090         {
                 ; 0000 0091          for (i=0;i<10;i++)
0000ad e010      	LDI  R17,LOW(0)
                 _0x25:
0000ae 301a      	CPI  R17,10
0000af f4e8      	BRSH _0x26
                 ; 0000 0092          {
                 ; 0000 0093             for(j=0;j<10;j++)
0000b0 e000      	LDI  R16,LOW(0)
                 _0x28:
0000b1 300a      	CPI  R16,10
0000b2 f4c0      	BRSH _0x29
                 ; 0000 0094             {
                 ; 0000 0095               for(m=0;m<10;m++)
0000b3 e030      	LDI  R19,LOW(0)
                 _0x2B:
0000b4 303a      	CPI  R19,10
0000b5 f498      	BRSH _0x2C
                 ; 0000 0096               {
                 ; 0000 0097                  for(n=0;n<10;n++)
0000b6 e020      	LDI  R18,LOW(0)
                 _0x2E:
0000b7 302a      	CPI  R18,10
0000b8 f470      	BRSH _0x2F
                 ; 0000 0098                  {
                 ; 0000 0099                    for (z=0;z<25;z++)
                +
0000b9 e040     +LDI R20 , LOW ( 0 )
0000ba e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x31:
                +
0000bb 3149     +CPI R20 , LOW ( 25 )
0000bc e0e0     +LDI R30 , HIGH ( 25 )
0000bd 075e     +CPC R21 , R30
                 	__CPWRN 20,21,25
0000be f434      	BRGE _0x32
                 ; 0000 009A                    {
                 ; 0000 009B                      PORTD=1;
0000bf d082      	RCALL SUBOPT_0x0
                 ; 0000 009C                      PORTB=digit[i];
                 ; 0000 009D                      delay_ms(1);
                 ; 0000 009E 
                 ; 0000 009F                      PORTD=0X02;
                 ; 0000 00A0                      PORTB=digit[j];
                 ; 0000 00A1                      delay_ms(1);
                 ; 0000 00A2 
                 ; 0000 00A3                      PORTD=0X04;
0000c0 d09f      	RCALL SUBOPT_0x2
                 ; 0000 00A4                      PORTB=digit[m];
                 ; 0000 00A5                      delay_ms(1);
                 ; 0000 00A6 
                 ; 0000 00A7                      PORTD=0X08;
0000c1 d0a5      	RCALL SUBOPT_0x3
                 ; 0000 00A8                      PORTB=digit[n];
                 ; 0000 00A9                      delay_ms(1);
                 ; 0000 00AA 
                 ; 0000 00AB                    }
                +
0000c2 5f4f     +SUBI R20 , LOW ( - 1 )
0000c3 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0000c4 cff6      	RJMP _0x31
                 _0x32:
                 ; 0000 00AC                  }
0000c5 5f2f      	SUBI R18,-1
0000c6 cff0      	RJMP _0x2E
                 _0x2F:
                 ; 0000 00AD               }
0000c7 5f3f      	SUBI R19,-1
0000c8 cfeb      	RJMP _0x2B
                 _0x2C:
                 ; 0000 00AE             }
0000c9 5f0f      	SUBI R16,-1
0000ca cfe6      	RJMP _0x28
                 _0x29:
                 ; 0000 00AF           }
0000cb 5f1f      	SUBI R17,-1
0000cc cfe1      	RJMP _0x25
                 _0x26:
                 ; 0000 00B0         }
                 ; 0000 00B1 
                 ; 0000 00B2         //part 4      9999 TO 0
                 ; 0000 00B3         if(PINA.3==1)// dip btn 4 -> pin.a3
                 _0x23:
0000cd 9bcb      	SBIS 0x19,3
0000ce c025      	RJMP _0x33
                 ; 0000 00B4         {
                 ; 0000 00B5          if(flag==0)
0000cf 81e8      	LD   R30,Y
0000d0 30e0      	CPI  R30,0
0000d1 f431      	BRNE _0x34
                 ; 0000 00B6          {
                 ; 0000 00B7          flag+=1;
0000d2 5fef      	SUBI R30,-LOW(1)
0000d3 83e8      	ST   Y,R30
                 ; 0000 00B8          i=9;
0000d4 e019      	LDI  R17,LOW(9)
                 ; 0000 00B9          j=9;
0000d5 e009      	LDI  R16,LOW(9)
                 ; 0000 00BA          m=9;
0000d6 e039      	LDI  R19,LOW(9)
                 ; 0000 00BB          n=9;
0000d7 e029      	LDI  R18,LOW(9)
                 ; 0000 00BC          }
                 ; 0000 00BD                    for (z=0;z<25;z++)
                 _0x34:
                +
0000d8 e040     +LDI R20 , LOW ( 0 )
0000d9 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x36:
                +
0000da 3149     +CPI R20 , LOW ( 25 )
0000db e0e0     +LDI R30 , HIGH ( 25 )
0000dc 075e     +CPC R21 , R30
                 	__CPWRN 20,21,25
0000dd f434      	BRGE _0x37
                 ; 0000 00BE                    {
                 ; 0000 00BF                      PORTD=1;
0000de d063      	RCALL SUBOPT_0x0
                 ; 0000 00C0                      PORTB=digit[i];
                 ; 0000 00C1                      delay_ms(1);
                 ; 0000 00C2 
                 ; 0000 00C3                      PORTD=0X02;
                 ; 0000 00C4                      PORTB=digit[j];
                 ; 0000 00C5                      delay_ms(1);
                 ; 0000 00C6 
                 ; 0000 00C7                      PORTD=0X04;
0000df d080      	RCALL SUBOPT_0x2
                 ; 0000 00C8                      PORTB=digit[m];
                 ; 0000 00C9                      delay_ms(1);
                 ; 0000 00CA 
                 ; 0000 00CB                      PORTD=0X08;
0000e0 d086      	RCALL SUBOPT_0x3
                 ; 0000 00CC                      PORTB=digit[n];
                 ; 0000 00CD                      delay_ms(1);
                 ; 0000 00CE                     }
                +
0000e1 5f4f     +SUBI R20 , LOW ( - 1 )
0000e2 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0000e3 cff6      	RJMP _0x36
                 _0x37:
                 ; 0000 00CF 
                 ; 0000 00D0 
                 ; 0000 00D1 
                 ; 0000 00D2                   if(n==0)
0000e4 3020      	CPI  R18,0
0000e5 f469      	BRNE _0x38
                 ; 0000 00D3                   {
                 ; 0000 00D4                    if(m==0)
0000e6 3030      	CPI  R19,0
0000e7 f449      	BRNE _0x39
                 ; 0000 00D5                    {
                 ; 0000 00D6                      if(j==0)
0000e8 3000      	CPI  R16,0
0000e9 f429      	BRNE _0x3A
                 ; 0000 00D7                      {
                 ; 0000 00D8                         if(i==0)
0000ea 3010      	CPI  R17,0
0000eb f409      	BRNE _0x3B
                 ; 0000 00D9                         {
                 ; 0000 00DA                          i = 10;
0000ec e01a      	LDI  R17,LOW(10)
                 ; 0000 00DB                         }
                 ; 0000 00DC                         j = 10 ;
                 _0x3B:
0000ed e00a      	LDI  R16,LOW(10)
                 ; 0000 00DD                         i-=1;
0000ee 5011      	SUBI R17,LOW(1)
                 ; 0000 00DE                      }
                 ; 0000 00DF                      m = 10;
                 _0x3A:
0000ef e03a      	LDI  R19,LOW(10)
                 ; 0000 00E0                      j-=1;
0000f0 5001      	SUBI R16,LOW(1)
                 ; 0000 00E1                    }
                 ; 0000 00E2                    n= 10;
                 _0x39:
0000f1 e02a      	LDI  R18,LOW(10)
                 ; 0000 00E3                    m-=1;
0000f2 5031      	SUBI R19,LOW(1)
                 ; 0000 00E4                   }
                 ; 0000 00E5                   n-=1;
                 _0x38:
0000f3 5021      	SUBI R18,LOW(1)
                 ; 0000 00E6 
                 ; 0000 00E7         }
                 ; 0000 00E8 
                 ; 0000 00E9         //part 5      MY PHONE NUMBER
                 ; 0000 00EA         if(PINA.4==1)// dip btn 5 -> pina.4
                 _0x33:
0000f4 9bcc      	SBIS 0x19,4
0000f5 c04a      	RJMP _0x3C
                 ; 0000 00EB         {
                 ; 0000 00EC               while(1)
                 _0x3D:
                 ; 0000 00ED               {
                 ; 0000 00EE                  for (z=0;z<250;z++) //--0912
                +
0000f6 e040     +LDI R20 , LOW ( 0 )
0000f7 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x41:
                +
0000f8 3f4a     +CPI R20 , LOW ( 250 )
0000f9 e0e0     +LDI R30 , HIGH ( 250 )
0000fa 075e     +CPC R21 , R30
                 	__CPWRN 20,21,250
0000fb f4a4      	BRGE _0x42
                 ; 0000 00EF                  {
                 ; 0000 00F0                      PORTD=1;
0000fc e0e1      	LDI  R30,LOW(1)
0000fd bbe2      	OUT  0x12,R30
                 ; 0000 00F1                      PORTB=digit[0];
0000fe e5e4      	LDI  R30,LOW(_digit*2)
0000ff e0f0      	LDI  R31,HIGH(_digit*2)
000100 d059      	RCALL SUBOPT_0x1
                 ; 0000 00F2                      delay_ms(1);
                 ; 0000 00F3 
                 ; 0000 00F4                      PORTD=0X02;
000101 e0e2      	LDI  R30,LOW(2)
000102 d06b      	RCALL SUBOPT_0x4
                 ; 0000 00F5                      PORTB=digit[9];
                 ; 0000 00F6                      delay_ms(1);
                 ; 0000 00F7 
                 ; 0000 00F8                      PORTD=0X04;
000103 e0e4      	LDI  R30,LOW(4)
000104 bbe2      	OUT  0x12,R30
                 ; 0000 00F9                      PORTB=digit[1];
                +
000105 e5e5     +LDI R30 , LOW ( 2 * _digit + ( 1 ) )
000106 e0f0     +LDI R31 , HIGH ( 2 * _digit + ( 1 ) )
                 	__POINTW1FN _digit,1
000107 d052      	RCALL SUBOPT_0x1
                 ; 0000 00FA                      delay_ms(1);
                 ; 0000 00FB 
                 ; 0000 00FC                      PORTD=0X08;
000108 e0e8      	LDI  R30,LOW(8)
000109 bbe2      	OUT  0x12,R30
                 ; 0000 00FD                      PORTB=digit[2];
                +
00010a e5e6     +LDI R30 , LOW ( 2 * _digit + ( 2 ) )
00010b e0f0     +LDI R31 , HIGH ( 2 * _digit + ( 2 ) )
                 	__POINTW1FN _digit,2
00010c d04d      	RCALL SUBOPT_0x1
                 ; 0000 00FE                      delay_ms(1);
                 ; 0000 00FF                  }
                +
00010d 5f4f     +SUBI R20 , LOW ( - 1 )
00010e 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
00010f cfe8      	RJMP _0x41
                 _0x42:
                 ; 0000 0100 
                 ; 0000 0101                     for (z=0;z<250;z++) //--933
                +
000110 e040     +LDI R20 , LOW ( 0 )
000111 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x44:
                +
000112 3f4a     +CPI R20 , LOW ( 250 )
000113 e0e0     +LDI R30 , HIGH ( 250 )
000114 075e     +CPC R21 , R30
                 	__CPWRN 20,21,250
000115 f47c      	BRGE _0x45
                 ; 0000 0102                     {
                 ; 0000 0103                      PORTD=1;
000116 e0e1      	LDI  R30,LOW(1)
000117 d056      	RCALL SUBOPT_0x4
                 ; 0000 0104                      PORTB=digit[9];
                 ; 0000 0105                      delay_ms(1);
                 ; 0000 0106 
                 ; 0000 0107                      PORTD=0X02;
000118 e0e2      	LDI  R30,LOW(2)
000119 bbe2      	OUT  0x12,R30
                 ; 0000 0108                      PORTB=digit[3];
                +
00011a e5e7     +LDI R30 , LOW ( 2 * _digit + ( 3 ) )
00011b e0f0     +LDI R31 , HIGH ( 2 * _digit + ( 3 ) )
                 	__POINTW1FN _digit,3
00011c d03d      	RCALL SUBOPT_0x1
                 ; 0000 0109                      delay_ms(1);
                 ; 0000 010A 
                 ; 0000 010B                      PORTD=0X04;
00011d e0e4      	LDI  R30,LOW(4)
00011e bbe2      	OUT  0x12,R30
                 ; 0000 010C                      PORTB=digit[3];
                +
00011f e5e7     +LDI R30 , LOW ( 2 * _digit + ( 3 ) )
000120 e0f0     +LDI R31 , HIGH ( 2 * _digit + ( 3 ) )
                 	__POINTW1FN _digit,3
000121 d038      	RCALL SUBOPT_0x1
                 ; 0000 010D                      delay_ms(1);
                 ; 0000 010E                     }
                +
000122 5f4f     +SUBI R20 , LOW ( - 1 )
000123 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000124 cfed      	RJMP _0x44
                 _0x45:
                 ; 0000 010F 
                 ; 0000 0110                     for (z=0;z<250;z++) //--6709
                +
000125 e040     +LDI R20 , LOW ( 0 )
000126 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x47:
                +
000127 3f4a     +CPI R20 , LOW ( 250 )
000128 e0e0     +LDI R30 , HIGH ( 250 )
000129 075e     +CPC R21 , R30
                 	__CPWRN 20,21,250
00012a f4a4      	BRGE _0x48
                 ; 0000 0111                     {
                 ; 0000 0112 
                 ; 0000 0113                      PORTD=1;
00012b e0e1      	LDI  R30,LOW(1)
00012c bbe2      	OUT  0x12,R30
                 ; 0000 0114                      PORTB=digit[6];
                +
00012d e5ea     +LDI R30 , LOW ( 2 * _digit + ( 6 ) )
00012e e0f0     +LDI R31 , HIGH ( 2 * _digit + ( 6 ) )
                 	__POINTW1FN _digit,6
00012f d02a      	RCALL SUBOPT_0x1
                 ; 0000 0115                      delay_ms(1);
                 ; 0000 0116 
                 ; 0000 0117                      PORTD=0x02;
000130 e0e2      	LDI  R30,LOW(2)
000131 bbe2      	OUT  0x12,R30
                 ; 0000 0118                      PORTB=digit[7];
                +
000132 e5eb     +LDI R30 , LOW ( 2 * _digit + ( 7 ) )
000133 e0f0     +LDI R31 , HIGH ( 2 * _digit + ( 7 ) )
                 	__POINTW1FN _digit,7
000134 d025      	RCALL SUBOPT_0x1
                 ; 0000 0119                      delay_ms(1);
                 ; 0000 011A 
                 ; 0000 011B                      PORTD=0X04;
000135 e0e4      	LDI  R30,LOW(4)
000136 bbe2      	OUT  0x12,R30
                 ; 0000 011C                      PORTB=digit[0];
000137 e5e4      	LDI  R30,LOW(_digit*2)
000138 e0f0      	LDI  R31,HIGH(_digit*2)
000139 d020      	RCALL SUBOPT_0x1
                 ; 0000 011D                      delay_ms(1);
                 ; 0000 011E 
                 ; 0000 011F                      PORTD=0X08;
00013a e0e8      	LDI  R30,LOW(8)
00013b d032      	RCALL SUBOPT_0x4
                 ; 0000 0120                      PORTB=digit[9];
                 ; 0000 0121                      delay_ms(1);
                 ; 0000 0122                     }
                +
00013c 5f4f     +SUBI R20 , LOW ( - 1 )
00013d 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
00013e cfe8      	RJMP _0x47
                 _0x48:
                 ; 0000 0123               }
00013f cfb6      	RJMP _0x3D
                 ; 0000 0124         }
                 ; 0000 0125 
                 ; 0000 0126     }
                 _0x3C:
000140 cf1d      	RJMP _0x3
                 ; 0000 0127  }
                 _0x49:
000141 cfff      	RJMP _0x49
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:63 WORDS
                 SUBOPT_0x0:
000142 e0e1      	LDI  R30,LOW(1)
000143 bbe2      	OUT  0x12,R30
000144 2fe1      	MOV  R30,R17
000145 e0f0      	LDI  R31,0
000146 5aec      	SUBI R30,LOW(-_digit*2)
000147 4fff      	SBCI R31,HIGH(-_digit*2)
000148 9004      	LPM  R0,Z
000149 ba08      	OUT  0x18,R0
00014a e0a1      	LDI  R26,LOW(1)
00014b e0b0      	LDI  R27,0
00014c 940e 0172 	CALL _delay_ms
00014e e0e2      	LDI  R30,LOW(2)
00014f bbe2      	OUT  0x12,R30
000150 2fe0      	MOV  R30,R16
000151 e0f0      	LDI  R31,0
000152 5aec      	SUBI R30,LOW(-_digit*2)
000153 4fff      	SBCI R31,HIGH(-_digit*2)
000154 9004      	LPM  R0,Z
000155 ba08      	OUT  0x18,R0
000156 e0a1      	LDI  R26,LOW(1)
000157 e0b0      	LDI  R27,0
000158 940c 0172 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:69 WORDS
                 SUBOPT_0x1:
00015a 9004      	LPM  R0,Z
00015b ba08      	OUT  0x18,R0
00015c e0a1      	LDI  R26,LOW(1)
00015d e0b0      	LDI  R27,0
00015e 940c 0172 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000160 e0e4      	LDI  R30,LOW(4)
000161 bbe2      	OUT  0x12,R30
000162 2fe3      	MOV  R30,R19
000163 e0f0      	LDI  R31,0
000164 5aec      	SUBI R30,LOW(-_digit*2)
000165 4fff      	SBCI R31,HIGH(-_digit*2)
000166 cff3      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000167 e0e8      	LDI  R30,LOW(8)
000168 bbe2      	OUT  0x12,R30
000169 2fe2      	MOV  R30,R18
00016a e0f0      	LDI  R31,0
00016b 5aec      	SUBI R30,LOW(-_digit*2)
00016c 4fff      	SBCI R31,HIGH(-_digit*2)
00016d cfec      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
00016e bbe2      	OUT  0x12,R30
                +
00016f e5ed     +LDI R30 , LOW ( 2 * _digit + ( 9 ) )
000170 e0f0     +LDI R31 , HIGH ( 2 * _digit + ( 9 ) )
                 	__POINTW1FN _digit,9
000171 cfe8      	RJMP SUBOPT_0x1
                 
                 
                 	.CSEG
                 _delay_ms:
000172 9610      	adiw r26,0
000173 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000174 ed80     +LDI R24 , LOW ( 0x7D0 )
000175 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000176 9701     +SBIW R24 , 1
000177 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000178 95a8      	wdr
000179 9711      	sbiw r26,1
00017a f7c9      	brne __delay_ms0
                 __delay_ms1:
00017b 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   6 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  15 r17:  15 r18:   9 r19:   9 r20:  25 r21:  25 r22:   0 r23:   0 
r24:   6 r25:   2 r26:   7 r27:   4 r28:   2 r29:   1 r30:  98 r31:  23 
x  :   2 y  :   3 z  :   3 
Registers used: 18 out of 35 (51.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   1 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   1 
brge  :   8 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  13 brpl  :   0 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   1 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   8 cpi   :  21 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  24 ld    :   1 ldd   :   0 ldi   : 118 
lds   :   0 lpm   :   6 lsl   :   0 lsr   :   0 mov   :   4 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  31 pop   :   0 push  :   0 rcall :  23 ret   :   1 
reti  :   0 rjmp  :  28 rol   :   0 ror   :   0 sbc   :   0 sbci  :  12 
sbi   :   0 sbic  :   0 sbis  :   8 sbiw  :   4 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   4 std   :   0 sts   :   0 sub   :   0 subi  :  25 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 26 out of 116 (22.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002f8    746     14    760   16384   4.6%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
