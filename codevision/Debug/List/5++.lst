
AVRASM ver. 2.1.30  D:\dars\az riz\New V\codevision\Debug\List\5++.asm Wed Nov 24 17:45:49 2021

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0031 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _digit:
00002a f940
00002b 3024
00002c 1219
00002d 7802      	.DB  0x40,0xF9,0x24,0x30,0x19,0x12,0x2,0x78
00002e 1000      	.DB  0x0,0x10
                 _hell:
00002f 0609
000030 c7c7      	.DB  0x9,0x6,0xC7,0xC7
                 
                 __RESET:
000031 94f8      	CLI
000032 27ee      	CLR  R30
000033 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000034 e0f1      	LDI  R31,1
000035 bffb      	OUT  GICR,R31
000036 bfeb      	OUT  GICR,R30
000037 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000038 e08d      	LDI  R24,(14-2)+1
000039 e0a2      	LDI  R26,2
00003a 27bb      	CLR  R27
                 __CLEAR_REG:
00003b 93ed      	ST   X+,R30
00003c 958a      	DEC  R24
00003d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000040 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000041 93ed      	ST   X+,R30
000042 9701      	SBIW R24,1
000043 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000044 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000045 bfed      	OUT  SPL,R30
000046 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000047 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000048 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000049 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004a 940c 004c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include<mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include<delay.h>
                 ;flash unsigned char
                 ;digit[10]={0b01000000,0b011111001,0b00100100,0b00110000,0b00011001,0b00010010,0b00000010,0b01111000,0b00000000,0b0001000 ...
                 ;flash unsigned char
                 ;hell[4]={0b00001001 , 0b00000110 , 0b011000111 ,0b011000111  };       //----- it also could be like :  hel[3]={0b0000100 ...
                 ;void  main(void)
                 ; 0000 0008 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0009  char i=0;   // in 4 digit nymbers : stands for | [4]321 | &  2 digit nymbers : stands for | [2]1 |
                 ; 0000 000A  char j=0;   // in 4 digit nymbers : stands for | 4[3]21 | &                               | 2[1] |
                 ; 0000 000B  char m=0;   // in 4 digit nymbers : stands for | 43[2]1 |
                 ; 0000 000C  char n=0;   // in 4 digit nymbers : stands for | 432[1] |
                 ; 0000 000D  int z=0;    // just for show & time set
                 ; 0000 000E 
                 ; 0000 000F 
                 ; 0000 0010  DDRB=0Xff;  // 7seg output
                 ;	i -> R17
                 ;	j -> R16
                 ;	m -> R19
                 ;	n -> R18
                 ;	z -> R20,R21
00004c e010      	LDI  R17,0
00004d e000      	LDI  R16,0
00004e e030      	LDI  R19,0
00004f e020      	LDI  R18,0
                +
000050 e040     +LDI R20 , LOW ( 0 )
000051 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000052 efef      	LDI  R30,LOW(255)
000053 bbe7      	OUT  0x17,R30
                 ; 0000 0011  PORTB=0X00; //
000054 e0e0      	LDI  R30,LOW(0)
000055 bbe8      	OUT  0x18,R30
                 ; 0000 0012 
                 ; 0000 0013  DDRD=0Xff;  // for  output control
000056 efef      	LDI  R30,LOW(255)
000057 bbe1      	OUT  0x11,R30
                 ; 0000 0014  PORTD=0X00; //
000058 e0e0      	LDI  R30,LOW(0)
000059 bbe2      	OUT  0x12,R30
                 ; 0000 0015 
                 ; 0000 0016  DDRA=0X00;  // for tst push btn [a6 a5] &  dip switch [a0 a1 a2 a3 a4]
00005a bbea      	OUT  0x1A,R30
                 ; 0000 0017 
                 ; 0000 0018      while(1)
                 _0x3:
                 ; 0000 0019     {
                 ; 0000 001A         //part 1
                 ; 0000 001B         if(PINA.0==1)// dip btn 1 -> pina.0
00005b 9bc8      	SBIS 0x19,0
00005c c02e      	RJMP _0x6
                 ; 0000 001C         {
                 ; 0000 001D                // j=9;  //for checking dec
                 ; 0000 001E                // i=9;  //
                 ; 0000 001F                 while(1)
                 _0x7:
                 ; 0000 0020                 {
                 ; 0000 0021                 A :
                 _0xA:
                 ; 0000 0022                      for (z=0;z<25;z++) // show part
                +
00005d e040     +LDI R20 , LOW ( 0 )
00005e e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0xC:
                +
00005f 3149     +CPI R20 , LOW ( 25 )
000060 e0e0     +LDI R30 , HIGH ( 25 )
000061 075e     +CPC R21 , R30
                 	__CPWRN 20,21,25
000062 f424      	BRGE _0xD
                 ; 0000 0023                      {
                 ; 0000 0024                        PORTD=1;
000063 d0d8      	RCALL SUBOPT_0x0
                 ; 0000 0025                        PORTB=digit[i];
                 ; 0000 0026                        delay_ms(1);
                 ; 0000 0027 
                 ; 0000 0028                        PORTD=0X02;
                 ; 0000 0029                        PORTB=digit[j];
                 ; 0000 002A                        delay_ms(1);
                 ; 0000 002B                       }
                +
000064 5f4f     +SUBI R20 , LOW ( - 1 )
000065 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000066 cff8      	RJMP _0xC
                 _0xD:
                 ; 0000 002C 
                 ; 0000 002D 
                 ; 0000 002E                         while(PINA.5==0) goto dec ;  // if you want to check you can comment this line
000067 9bcd      	SBIS 0x19,5
000068 c008      	RJMP _0x11
                 ; 0000 002F 
                 ; 0000 0030                         if(j==9)
000069 3009      	CPI  R16,9
00006a f429      	BRNE _0x12
                 ; 0000 0031                         {
                 ; 0000 0032                           if(i==9)
00006b 3019      	CPI  R17,9
00006c f409      	BRNE _0x13
                 ; 0000 0033                           {
                 ; 0000 0034                            //if (j==9)
                 ; 0000 0035                            {i=-1;}  //  [9](9) -> [0](9not_important_here)  ; i=-1 cuse will be +1 and i will be = 0 IN  ...
00006d ef1f      	LDI  R17,LOW(255)
                 ; 0000 0036                           }
                 ; 0000 0037 
                 ; 0000 0038                          j= -1 ;  // j from [9] -> [0]   in **
                 _0x13:
00006e ef0f      	LDI  R16,LOW(255)
                 ; 0000 0039                          i+=1;  // number + 10 ; if A[9] + 0[1] = [a+1]0    here is [[[[ *  ]]]]
00006f 5f1f      	SUBI R17,-LOW(1)
                 ; 0000 003A                         }
                 ; 0000 003B                         j+=1;   // number + 1            here is [[[[ ** ]]]]]
                 _0x12:
000070 5f0f      	SUBI R16,-LOW(1)
                 ; 0000 003C 
                 ; 0000 003D                        /*
                 ; 0000 003E                         while(PINA.5==1)
                 ; 0000 003F                         {
                 ; 0000 0040                          for (z=0;z<25;z++) // show part
                 ; 0000 0041                          {
                 ; 0000 0042                          PORTD=1;
                 ; 0000 0043                          PORTB=digit[i];
                 ; 0000 0044                          delay_ms(1);
                 ; 0000 0045 
                 ; 0000 0046                          PORTD=0X02;
                 ; 0000 0047                          PORTB=digit[j];
                 ; 0000 0048                          delay_ms(1);
                 ; 0000 0049                          }
                 ; 0000 004A                         }
                 ; 0000 004B                        */
                 ; 0000 004C                         ////////////////////////////////////////////////////////////////////////
                 ; 0000 004D 
                 ; 0000 004E                 dec:
                 _0x11:
                 ; 0000 004F 
                 ; 0000 0050                       while(PINA.6==0) goto A ;  // if you want to check you can comment this line
000071 9bce      	SBIS 0x19,6
000072 cfea      	RJMP _0xA
                 ; 0000 0051 
                 ; 0000 0052                         if(j==0)
000073 3000      	CPI  R16,0
000074 f439      	BRNE _0x17
                 ; 0000 0053                         {
                 ; 0000 0054                           if(i==0)
000075 3010      	CPI  R17,0
000076 f419      	BRNE _0x18
                 ; 0000 0055                           {
                 ; 0000 0056                            if (j==0){ i=10; }  //  [0](0) ->
000077 3000      	CPI  R16,0
000078 f409      	BRNE _0x19
000079 e01a      	LDI  R17,LOW(10)
                 ; 0000 0057                           }
                 _0x19:
                 ; 0000 0058 
                 ; 0000 0059                          j= 10 ;  // j from [0] will be -> [9 ]   in **
                 _0x18:
00007a e00a      	LDI  R16,LOW(10)
                 ; 0000 005A                          i-=1;  // number - 10 ; if [j]A - [1]0 = [j-1]A    here is [[[[ *  ]]]]
00007b 5011      	SUBI R17,LOW(1)
                 ; 0000 005B                         }
                 ; 0000 005C                         j-=1;   // number + 1            here is [[[[ ** ]]]]]
                 _0x17:
00007c 5001      	SUBI R16,LOW(1)
                 ; 0000 005D 
                 ; 0000 005E                         while(PINA.6==1)
                 _0x1A:
00007d 9bce      	SBIS 0x19,6
00007e c00b      	RJMP _0x1C
                 ; 0000 005F                         {
                 ; 0000 0060                          for (z=0;z<25;z++) // show part
                +
00007f e040     +LDI R20 , LOW ( 0 )
000080 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x1E:
                +
000081 3149     +CPI R20 , LOW ( 25 )
000082 e0e0     +LDI R30 , HIGH ( 25 )
000083 075e     +CPC R21 , R30
                 	__CPWRN 20,21,25
000084 f424      	BRGE _0x1F
                 ; 0000 0061                          {
                 ; 0000 0062                          PORTD=1;
000085 d0b6      	RCALL SUBOPT_0x0
                 ; 0000 0063                          PORTB=digit[i];
                 ; 0000 0064                          delay_ms(1);
                 ; 0000 0065 
                 ; 0000 0066                          PORTD=0X02;
                 ; 0000 0067                          PORTB=digit[j];
                 ; 0000 0068                          delay_ms(1);
                 ; 0000 0069                          }
                +
000086 5f4f     +SUBI R20 , LOW ( - 1 )
000087 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000088 cff8      	RJMP _0x1E
                 _0x1F:
                 ; 0000 006A                         }
000089 cff3      	RJMP _0x1A
                 _0x1C:
                 ; 0000 006B 
                 ; 0000 006C 
                 ; 0000 006D 
                 ; 0000 006E                     }
00008a cfd2      	RJMP _0x7
                 ; 0000 006F 
                 ; 0000 0070 
                 ; 0000 0071 
                 ; 0000 0072            }
                 ; 0000 0073         //end part 1
                 ; 0000 0074 
                 ; 0000 0075            //part2     HELL
                 ; 0000 0076            if(PINA.1==1) //dip btn 2 -> pina.1
                 _0x6:
00008b 9bc9      	SBIS 0x19,1
00008c c01d      	RJMP _0x20
                 ; 0000 0077            {
                 ; 0000 0078             for (z=0;z<250;z++)
                +
00008d e040     +LDI R20 , LOW ( 0 )
00008e e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x22:
                +
00008f 3f4a     +CPI R20 , LOW ( 250 )
000090 e0e0     +LDI R30 , HIGH ( 250 )
000091 075e     +CPC R21 , R30
                 	__CPWRN 20,21,250
000092 f4bc      	BRGE _0x23
                 ; 0000 0079             {
                 ; 0000 007A                 PORTD=1;
000093 e0e1      	LDI  R30,LOW(1)
000094 bbe2      	OUT  0x12,R30
                 ; 0000 007B                 PORTB=hell[0];
000095 e5ee      	LDI  R30,LOW(_hell*2)
000096 e0f0      	LDI  R31,HIGH(_hell*2)
000097 d0bc      	RCALL SUBOPT_0x1
                 ; 0000 007C                 delay_ms(1);
                 ; 0000 007D 
                 ; 0000 007E                  PORTD=0X02;
000098 e0e2      	LDI  R30,LOW(2)
000099 bbe2      	OUT  0x12,R30
                 ; 0000 007F                  PORTB=hell[1];
                +
00009a e5ef     +LDI R30 , LOW ( 2 * _hell + ( 1 ) )
00009b e0f0     +LDI R31 , HIGH ( 2 * _hell + ( 1 ) )
                 	__POINTW1FN _hell,1
00009c d0b7      	RCALL SUBOPT_0x1
                 ; 0000 0080                  delay_ms(1);
                 ; 0000 0081 
                 ; 0000 0082                  PORTD=0X04;
00009d e0e4      	LDI  R30,LOW(4)
00009e bbe2      	OUT  0x12,R30
                 ; 0000 0083                  PORTB=hell[2];
                +
00009f e6e0     +LDI R30 , LOW ( 2 * _hell + ( 2 ) )
0000a0 e0f0     +LDI R31 , HIGH ( 2 * _hell + ( 2 ) )
                 	__POINTW1FN _hell,2
0000a1 d0b2      	RCALL SUBOPT_0x1
                 ; 0000 0084                  delay_ms(1);
                 ; 0000 0085 
                 ; 0000 0086                  PORTD=0X08;
0000a2 e0e8      	LDI  R30,LOW(8)
0000a3 bbe2      	OUT  0x12,R30
                 ; 0000 0087                  PORTB=hell[3];//    or  PORTB=hell[2]; again
                +
0000a4 e6e1     +LDI R30 , LOW ( 2 * _hell + ( 3 ) )
0000a5 e0f0     +LDI R31 , HIGH ( 2 * _hell + ( 3 ) )
                 	__POINTW1FN _hell,3
0000a6 d0ad      	RCALL SUBOPT_0x1
                 ; 0000 0088                  delay_ms(1);
                 ; 0000 0089             }
                +
0000a7 5f4f     +SUBI R20 , LOW ( - 1 )
0000a8 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0000a9 cfe5      	RJMP _0x22
                 _0x23:
                 ; 0000 008A            }
                 ; 0000 008B 
                 ; 0000 008C         //part 3     0 TO 9999
                 ; 0000 008D         if(PINA.2==1)// dip btn 3 -> pina.2
                 _0x20:
0000aa 9bca      	SBIS 0x19,2
0000ab c020      	RJMP _0x24
                 ; 0000 008E         {
                 ; 0000 008F          for (i=0;i<10;i++)
0000ac e010      	LDI  R17,LOW(0)
                 _0x26:
0000ad 301a      	CPI  R17,10
0000ae f4e8      	BRSH _0x27
                 ; 0000 0090          {
                 ; 0000 0091             for(j=0;j<10;j++)
0000af e000      	LDI  R16,LOW(0)
                 _0x29:
0000b0 300a      	CPI  R16,10
0000b1 f4c0      	BRSH _0x2A
                 ; 0000 0092             {
                 ; 0000 0093               for(m=0;m<10;m++)
0000b2 e030      	LDI  R19,LOW(0)
                 _0x2C:
0000b3 303a      	CPI  R19,10
0000b4 f498      	BRSH _0x2D
                 ; 0000 0094               {
                 ; 0000 0095                  for(n=0;n<10;n++)
0000b5 e020      	LDI  R18,LOW(0)
                 _0x2F:
0000b6 302a      	CPI  R18,10
0000b7 f470      	BRSH _0x30
                 ; 0000 0096                  {
                 ; 0000 0097                    for (z=0;z<25;z++)
                +
0000b8 e040     +LDI R20 , LOW ( 0 )
0000b9 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x32:
                +
0000ba 3149     +CPI R20 , LOW ( 25 )
0000bb e0e0     +LDI R30 , HIGH ( 25 )
0000bc 075e     +CPC R21 , R30
                 	__CPWRN 20,21,25
0000bd f434      	BRGE _0x33
                 ; 0000 0098                    {
                 ; 0000 0099                      PORTD=1;
0000be d07d      	RCALL SUBOPT_0x0
                 ; 0000 009A                      PORTB=digit[i];
                 ; 0000 009B                      delay_ms(1);
                 ; 0000 009C 
                 ; 0000 009D                      PORTD=0X02;
                 ; 0000 009E                      PORTB=digit[j];
                 ; 0000 009F                      delay_ms(1);
                 ; 0000 00A0 
                 ; 0000 00A1                      PORTD=0X04;
0000bf d09a      	RCALL SUBOPT_0x2
                 ; 0000 00A2                      PORTB=digit[m];
                 ; 0000 00A3                      delay_ms(1);
                 ; 0000 00A4 
                 ; 0000 00A5                      PORTD=0X08;
0000c0 d0a0      	RCALL SUBOPT_0x3
                 ; 0000 00A6                      PORTB=digit[n];
                 ; 0000 00A7                      delay_ms(1);
                 ; 0000 00A8 
                 ; 0000 00A9                    }
                +
0000c1 5f4f     +SUBI R20 , LOW ( - 1 )
0000c2 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0000c3 cff6      	RJMP _0x32
                 _0x33:
                 ; 0000 00AA                  }
0000c4 5f2f      	SUBI R18,-1
0000c5 cff0      	RJMP _0x2F
                 _0x30:
                 ; 0000 00AB               }
0000c6 5f3f      	SUBI R19,-1
0000c7 cfeb      	RJMP _0x2C
                 _0x2D:
                 ; 0000 00AC             }
0000c8 5f0f      	SUBI R16,-1
0000c9 cfe6      	RJMP _0x29
                 _0x2A:
                 ; 0000 00AD           }
0000ca 5f1f      	SUBI R17,-1
0000cb cfe1      	RJMP _0x26
                 _0x27:
                 ; 0000 00AE         }
                 ; 0000 00AF 
                 ; 0000 00B0         //part 4      9999 TO 0
                 ; 0000 00B1         if(PINA.3==1)// dip btn 4 -> pin.a3
                 _0x24:
0000cc 9bcb      	SBIS 0x19,3
0000cd c020      	RJMP _0x34
                 ; 0000 00B2         {
                 ; 0000 00B3          for (i=9;i>0;i--)
0000ce e019      	LDI  R17,LOW(9)
                 _0x36:
0000cf 3011      	CPI  R17,1
0000d0 f0e8      	BRLO _0x37
                 ; 0000 00B4          {
                 ; 0000 00B5             for(j=9;j>0;j--)
0000d1 e009      	LDI  R16,LOW(9)
                 _0x39:
0000d2 3001      	CPI  R16,1
0000d3 f0c0      	BRLO _0x3A
                 ; 0000 00B6             {
                 ; 0000 00B7 
                 ; 0000 00B8               for(m=9;m>0;m--)
0000d4 e039      	LDI  R19,LOW(9)
                 _0x3C:
0000d5 3031      	CPI  R19,1
0000d6 f098      	BRLO _0x3D
                 ; 0000 00B9               {
                 ; 0000 00BA                  for(n=9;n>0;n--)
0000d7 e029      	LDI  R18,LOW(9)
                 _0x3F:
0000d8 3021      	CPI  R18,1
0000d9 f070      	BRLO _0x40
                 ; 0000 00BB                  {
                 ; 0000 00BC                    for (z=0;z<25;z++)
                +
0000da e040     +LDI R20 , LOW ( 0 )
0000db e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x42:
                +
0000dc 3149     +CPI R20 , LOW ( 25 )
0000dd e0e0     +LDI R30 , HIGH ( 25 )
0000de 075e     +CPC R21 , R30
                 	__CPWRN 20,21,25
0000df f434      	BRGE _0x43
                 ; 0000 00BD                    {
                 ; 0000 00BE                      PORTD=1;
0000e0 d05b      	RCALL SUBOPT_0x0
                 ; 0000 00BF                      PORTB=digit[i];
                 ; 0000 00C0                      delay_ms(1);
                 ; 0000 00C1 
                 ; 0000 00C2                      PORTD=0X02;
                 ; 0000 00C3                      PORTB=digit[j];
                 ; 0000 00C4                      delay_ms(1);
                 ; 0000 00C5 
                 ; 0000 00C6                      PORTD=0X04;
0000e1 d078      	RCALL SUBOPT_0x2
                 ; 0000 00C7                      PORTB=digit[m];
                 ; 0000 00C8                      delay_ms(1);
                 ; 0000 00C9 
                 ; 0000 00CA                      PORTD=0X08;
0000e2 d07e      	RCALL SUBOPT_0x3
                 ; 0000 00CB                      PORTB=digit[n];
                 ; 0000 00CC                      delay_ms(1);
                 ; 0000 00CD                   }
                +
0000e3 5f4f     +SUBI R20 , LOW ( - 1 )
0000e4 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0000e5 cff6      	RJMP _0x42
                 _0x43:
                 ; 0000 00CE                 }
0000e6 5021      	SUBI R18,1
0000e7 cff0      	RJMP _0x3F
                 _0x40:
                 ; 0000 00CF                }
0000e8 5031      	SUBI R19,1
0000e9 cfeb      	RJMP _0x3C
                 _0x3D:
                 ; 0000 00D0             }
0000ea 5001      	SUBI R16,1
0000eb cfe6      	RJMP _0x39
                 _0x3A:
                 ; 0000 00D1          }
0000ec 5011      	SUBI R17,1
0000ed cfe1      	RJMP _0x36
                 _0x37:
                 ; 0000 00D2       }
                 ; 0000 00D3 
                 ; 0000 00D4         //part 5      MY PHONE NUMBER
                 ; 0000 00D5         if(PINA.4==1)// dip btn 5 -> pina.4
                 _0x34:
0000ee 9bcc      	SBIS 0x19,4
0000ef c04a      	RJMP _0x44
                 ; 0000 00D6         {
                 ; 0000 00D7               while(1)
                 _0x45:
                 ; 0000 00D8               {
                 ; 0000 00D9                  for (z=0;z<250;z++) //--0912
                +
0000f0 e040     +LDI R20 , LOW ( 0 )
0000f1 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x49:
                +
0000f2 3f4a     +CPI R20 , LOW ( 250 )
0000f3 e0e0     +LDI R30 , HIGH ( 250 )
0000f4 075e     +CPC R21 , R30
                 	__CPWRN 20,21,250
0000f5 f4a4      	BRGE _0x4A
                 ; 0000 00DA                  {
                 ; 0000 00DB                      PORTD=1;
0000f6 e0e1      	LDI  R30,LOW(1)
0000f7 bbe2      	OUT  0x12,R30
                 ; 0000 00DC                      PORTB=digit[0];
0000f8 e5e4      	LDI  R30,LOW(_digit*2)
0000f9 e0f0      	LDI  R31,HIGH(_digit*2)
0000fa d059      	RCALL SUBOPT_0x1
                 ; 0000 00DD                      delay_ms(1);
                 ; 0000 00DE 
                 ; 0000 00DF                      PORTD=0X02;
0000fb e0e2      	LDI  R30,LOW(2)
0000fc d06b      	RCALL SUBOPT_0x4
                 ; 0000 00E0                      PORTB=digit[9];
                 ; 0000 00E1                      delay_ms(1);
                 ; 0000 00E2 
                 ; 0000 00E3                      PORTD=0X04;
0000fd e0e4      	LDI  R30,LOW(4)
0000fe bbe2      	OUT  0x12,R30
                 ; 0000 00E4                      PORTB=digit[1];
                +
0000ff e5e5     +LDI R30 , LOW ( 2 * _digit + ( 1 ) )
000100 e0f0     +LDI R31 , HIGH ( 2 * _digit + ( 1 ) )
                 	__POINTW1FN _digit,1
000101 d052      	RCALL SUBOPT_0x1
                 ; 0000 00E5                      delay_ms(1);
                 ; 0000 00E6 
                 ; 0000 00E7                      PORTD=0X08;
000102 e0e8      	LDI  R30,LOW(8)
000103 bbe2      	OUT  0x12,R30
                 ; 0000 00E8                      PORTB=digit[2];
                +
000104 e5e6     +LDI R30 , LOW ( 2 * _digit + ( 2 ) )
000105 e0f0     +LDI R31 , HIGH ( 2 * _digit + ( 2 ) )
                 	__POINTW1FN _digit,2
000106 d04d      	RCALL SUBOPT_0x1
                 ; 0000 00E9                      delay_ms(1);
                 ; 0000 00EA                  }
                +
000107 5f4f     +SUBI R20 , LOW ( - 1 )
000108 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000109 cfe8      	RJMP _0x49
                 _0x4A:
                 ; 0000 00EB 
                 ; 0000 00EC                     for (z=0;z<250;z++) //--933
                +
00010a e040     +LDI R20 , LOW ( 0 )
00010b e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x4C:
                +
00010c 3f4a     +CPI R20 , LOW ( 250 )
00010d e0e0     +LDI R30 , HIGH ( 250 )
00010e 075e     +CPC R21 , R30
                 	__CPWRN 20,21,250
00010f f47c      	BRGE _0x4D
                 ; 0000 00ED                     {
                 ; 0000 00EE                      PORTD=1;
000110 e0e1      	LDI  R30,LOW(1)
000111 d056      	RCALL SUBOPT_0x4
                 ; 0000 00EF                      PORTB=digit[9];
                 ; 0000 00F0                      delay_ms(1);
                 ; 0000 00F1 
                 ; 0000 00F2                      PORTD=0X02;
000112 e0e2      	LDI  R30,LOW(2)
000113 bbe2      	OUT  0x12,R30
                 ; 0000 00F3                      PORTB=digit[3];
                +
000114 e5e7     +LDI R30 , LOW ( 2 * _digit + ( 3 ) )
000115 e0f0     +LDI R31 , HIGH ( 2 * _digit + ( 3 ) )
                 	__POINTW1FN _digit,3
000116 d03d      	RCALL SUBOPT_0x1
                 ; 0000 00F4                      delay_ms(1);
                 ; 0000 00F5 
                 ; 0000 00F6                      PORTD=0X04;
000117 e0e4      	LDI  R30,LOW(4)
000118 bbe2      	OUT  0x12,R30
                 ; 0000 00F7                      PORTB=digit[3];
                +
000119 e5e7     +LDI R30 , LOW ( 2 * _digit + ( 3 ) )
00011a e0f0     +LDI R31 , HIGH ( 2 * _digit + ( 3 ) )
                 	__POINTW1FN _digit,3
00011b d038      	RCALL SUBOPT_0x1
                 ; 0000 00F8                      delay_ms(1);
                 ; 0000 00F9                     }
                +
00011c 5f4f     +SUBI R20 , LOW ( - 1 )
00011d 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
00011e cfed      	RJMP _0x4C
                 _0x4D:
                 ; 0000 00FA 
                 ; 0000 00FB                     for (z=0;z<250;z++) //--6709
                +
00011f e040     +LDI R20 , LOW ( 0 )
000120 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x4F:
                +
000121 3f4a     +CPI R20 , LOW ( 250 )
000122 e0e0     +LDI R30 , HIGH ( 250 )
000123 075e     +CPC R21 , R30
                 	__CPWRN 20,21,250
000124 f4a4      	BRGE _0x50
                 ; 0000 00FC                     {
                 ; 0000 00FD 
                 ; 0000 00FE                      PORTD=1;
000125 e0e1      	LDI  R30,LOW(1)
000126 bbe2      	OUT  0x12,R30
                 ; 0000 00FF                      PORTB=digit[6];
                +
000127 e5ea     +LDI R30 , LOW ( 2 * _digit + ( 6 ) )
000128 e0f0     +LDI R31 , HIGH ( 2 * _digit + ( 6 ) )
                 	__POINTW1FN _digit,6
000129 d02a      	RCALL SUBOPT_0x1
                 ; 0000 0100                      delay_ms(1);
                 ; 0000 0101 
                 ; 0000 0102                      PORTD=0x02;
00012a e0e2      	LDI  R30,LOW(2)
00012b bbe2      	OUT  0x12,R30
                 ; 0000 0103                      PORTB=digit[7];
                +
00012c e5eb     +LDI R30 , LOW ( 2 * _digit + ( 7 ) )
00012d e0f0     +LDI R31 , HIGH ( 2 * _digit + ( 7 ) )
                 	__POINTW1FN _digit,7
00012e d025      	RCALL SUBOPT_0x1
                 ; 0000 0104                      delay_ms(1);
                 ; 0000 0105 
                 ; 0000 0106                      PORTD=0X04;
00012f e0e4      	LDI  R30,LOW(4)
000130 bbe2      	OUT  0x12,R30
                 ; 0000 0107                      PORTB=digit[0];
000131 e5e4      	LDI  R30,LOW(_digit*2)
000132 e0f0      	LDI  R31,HIGH(_digit*2)
000133 d020      	RCALL SUBOPT_0x1
                 ; 0000 0108                      delay_ms(1);
                 ; 0000 0109 
                 ; 0000 010A                      PORTD=0X08;
000134 e0e8      	LDI  R30,LOW(8)
000135 d032      	RCALL SUBOPT_0x4
                 ; 0000 010B                      PORTB=digit[9];
                 ; 0000 010C                      delay_ms(1);
                 ; 0000 010D                     }
                +
000136 5f4f     +SUBI R20 , LOW ( - 1 )
000137 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000138 cfe8      	RJMP _0x4F
                 _0x50:
                 ; 0000 010E               }
000139 cfb6      	RJMP _0x45
                 ; 0000 010F         }
                 ; 0000 0110 
                 ; 0000 0111     }
                 _0x44:
00013a cf20      	RJMP _0x3
                 ; 0000 0112  }
                 _0x51:
00013b cfff      	RJMP _0x51
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:63 WORDS
                 SUBOPT_0x0:
00013c e0e1      	LDI  R30,LOW(1)
00013d bbe2      	OUT  0x12,R30
00013e 2fe1      	MOV  R30,R17
00013f e0f0      	LDI  R31,0
000140 5aec      	SUBI R30,LOW(-_digit*2)
000141 4fff      	SBCI R31,HIGH(-_digit*2)
000142 9004      	LPM  R0,Z
000143 ba08      	OUT  0x18,R0
000144 e0a1      	LDI  R26,LOW(1)
000145 e0b0      	LDI  R27,0
000146 940e 016c 	CALL _delay_ms
000148 e0e2      	LDI  R30,LOW(2)
000149 bbe2      	OUT  0x12,R30
00014a 2fe0      	MOV  R30,R16
00014b e0f0      	LDI  R31,0
00014c 5aec      	SUBI R30,LOW(-_digit*2)
00014d 4fff      	SBCI R31,HIGH(-_digit*2)
00014e 9004      	LPM  R0,Z
00014f ba08      	OUT  0x18,R0
000150 e0a1      	LDI  R26,LOW(1)
000151 e0b0      	LDI  R27,0
000152 940c 016c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:69 WORDS
                 SUBOPT_0x1:
000154 9004      	LPM  R0,Z
000155 ba08      	OUT  0x18,R0
000156 e0a1      	LDI  R26,LOW(1)
000157 e0b0      	LDI  R27,0
000158 940c 016c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
00015a e0e4      	LDI  R30,LOW(4)
00015b bbe2      	OUT  0x12,R30
00015c 2fe3      	MOV  R30,R19
00015d e0f0      	LDI  R31,0
00015e 5aec      	SUBI R30,LOW(-_digit*2)
00015f 4fff      	SBCI R31,HIGH(-_digit*2)
000160 cff3      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000161 e0e8      	LDI  R30,LOW(8)
000162 bbe2      	OUT  0x12,R30
000163 2fe2      	MOV  R30,R18
000164 e0f0      	LDI  R31,0
000165 5aec      	SUBI R30,LOW(-_digit*2)
000166 4fff      	SBCI R31,HIGH(-_digit*2)
000167 cfec      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000168 bbe2      	OUT  0x12,R30
                +
000169 e5ed     +LDI R30 , LOW ( 2 * _digit + ( 9 ) )
00016a e0f0     +LDI R31 , HIGH ( 2 * _digit + ( 9 ) )
                 	__POINTW1FN _digit,9
00016b cfe8      	RJMP SUBOPT_0x1
                 
                 
                 	.CSEG
                 _delay_ms:
00016c 9610      	adiw r26,0
00016d f039      	breq __delay_ms1
                 __delay_ms0:
                +
00016e ed80     +LDI R24 , LOW ( 0x7D0 )
00016f e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000170 9701     +SBIW R24 , 1
000171 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000172 95a8      	wdr
000173 9711      	sbiw r26,1
000174 f7c9      	brne __delay_ms0
                 __delay_ms1:
000175 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   6 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  15 r17:  14 r18:   8 r19:   8 r20:  25 r21:  25 r22:   0 r23:   0 
r24:   6 r25:   2 r26:   7 r27:   4 r28:   1 r29:   1 r30:  92 r31:  23 
x  :   2 y  :   0 z  :   3 
Registers used: 17 out of 35 (48.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   1 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   1 
brge  :   8 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   0 brmi  :   0 brne  :   9 brpl  :   0 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   1 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   8 cpi   :  21 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  24 ld    :   0 ldd   :   0 ldi   : 113 
lds   :   0 lpm   :   6 lsl   :   0 lsr   :   0 mov   :   4 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  31 pop   :   0 push  :   0 rcall :  23 ret   :   1 
reti  :   0 rjmp  :  32 rol   :   0 ror   :   0 sbc   :   0 sbci  :  12 
sbi   :   0 sbic  :   0 sbis  :   8 sbiw  :   3 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   2 std   :   0 sts   :   0 sub   :   0 subi  :  24 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 26 out of 116 (22.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002ec    734     14    748   16384   4.6%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
